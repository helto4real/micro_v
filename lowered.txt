lib.comp.binding.BoundBlockStmt{
    kind: block_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundVarDeclStmt{
    kind: var_decl_stmt
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 0
}))]
    is_mut: true
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 2
        child_nodes: []
        val: 0
    })
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundCondGotoStmt{
    kind: for_range_stmt
    typ: 0
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 3
    child_nodes: []
    val: false
}))]
    label: 'Label_1'
    cond: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 3
        child_nodes: []
        val: false
    })
    jump_if_true: false
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
    kind: assign_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 100
}))]
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 2
        child_nodes: []
        val: 100
    })
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
        kind: assign_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 100
}))]
        expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
            kind: literal_expr
            typ: 2
            child_nodes: []
            val: 100
        })
        var: &var: mut  <a> (int)
    })
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundGotoStmt{
    kind: for_range_stmt
    typ: 0
    child_nodes: []
    label: 'Label_2'
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundLabelStmt{
    kind: for_range_stmt
    typ: 0
    child_nodes: []
    name: 'Label_1'
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
    kind: assign_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 200
}))]
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 2
        child_nodes: []
        val: 200
    })
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
        kind: assign_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 200
}))]
        expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
            kind: literal_expr
            typ: 2
            child_nodes: []
            val: 200
        })
        var: &var: mut  <a> (int)
    })
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundLabelStmt{
    kind: for_range_stmt
    typ: 0
    child_nodes: []
    name: 'Label_2'
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
}))]
    bound_stmts: [lib.comp.binding.BoundStmt(lib.comp.binding.BoundVarDeclStmt{
    kind: var_decl_stmt
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 0
}))]
    is_mut: true
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 2
        child_nodes: []
        val: 0
    })
    var: &var: mut  <a> (int)
}), lib.comp.binding.BoundStmt(lib.comp.binding.BoundCondGotoStmt{
    kind: for_range_stmt
    typ: 0
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 3
    child_nodes: []
    val: false
}))]
    label: 'Label_1'
    cond: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 3
        child_nodes: []
        val: false
    })
    jump_if_true: false
}), lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
    kind: assign_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 100
}))]
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 2
        child_nodes: []
        val: 100
    })
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
        kind: assign_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 100
}))]
        expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
            kind: literal_expr
            typ: 2
            child_nodes: []
            val: 100
        })
        var: &var: mut  <a> (int)
    })
}), lib.comp.binding.BoundStmt(lib.comp.binding.BoundGotoStmt{
    kind: for_range_stmt
    typ: 0
    child_nodes: []
    label: 'Label_2'
}), lib.comp.binding.BoundStmt(lib.comp.binding.BoundLabelStmt{
    kind: for_range_stmt
    typ: 0
    child_nodes: []
    name: 'Label_1'
}), lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
    kind: assign_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 200
}))]
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 2
        child_nodes: []
        val: 200
    })
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
        kind: assign_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 200
}))]
        expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
            kind: literal_expr
            typ: 2
            child_nodes: []
            val: 200
        })
        var: &var: mut  <a> (int)
    })
}), lib.comp.binding.BoundStmt(lib.comp.binding.BoundLabelStmt{
    kind: for_range_stmt
    typ: 0
    child_nodes: []
    name: 'Label_2'
}), lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
})]
}