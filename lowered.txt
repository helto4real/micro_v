lib.comp.binding.BoundBlockStmt{
    kind: block_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundVarDeclStmt{
    kind: var_decl_stmt
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 0
}))]
    is_mut: true
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 2
        child_nodes: []
        val: 0
    })
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundForRangeStmt{
    kind: for_range_stmt
    typ: 0
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundRangeExpr{
    kind: range_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 0
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 10
}))]
    from_exp: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 2
        child_nodes: []
        val: 0
    })
    to_exp: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 2
        child_nodes: []
        val: 10
    })
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundBlockStmt{
    kind: block_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
    kind: assign_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
        kind: binary_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
        left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var: mut  <a> (int)
        })
        op: lib.comp.binding.BoundBinaryOperator{
            op_kind: addition
            kind: plus
            left_typ: 2
            right_typ: 2
            res_typ: 2
        }
        right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var:  <b> (int)
        })
    })
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
        kind: assign_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
        expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
            kind: binary_expr
            typ: 2
            child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
            left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var: mut  <a> (int)
            })
            op: lib.comp.binding.BoundBinaryOperator{
                op_kind: addition
                kind: plus
                left_typ: 2
                right_typ: 2
                res_typ: 2
            }
            right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var:  <b> (int)
            })
        })
        var: &var: mut  <a> (int)
    })
}))]
    bound_stmts: [lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
    kind: assign_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
        kind: binary_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
        left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var: mut  <a> (int)
        })
        op: lib.comp.binding.BoundBinaryOperator{
            op_kind: addition
            kind: plus
            left_typ: 2
            right_typ: 2
            res_typ: 2
        }
        right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var:  <b> (int)
        })
    })
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
        kind: assign_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
        expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
            kind: binary_expr
            typ: 2
            child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
            left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var: mut  <a> (int)
            })
            op: lib.comp.binding.BoundBinaryOperator{
                op_kind: addition
                kind: plus
                left_typ: 2
                right_typ: 2
                res_typ: 2
            }
            right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var:  <b> (int)
            })
        })
        var: &var: mut  <a> (int)
    })
})]
}))]
    ident: &var:  <b> (int)
    range_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundRangeExpr{
        kind: range_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 0
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 10
}))]
        from_exp: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
            kind: literal_expr
            typ: 2
            child_nodes: []
            val: 0
        })
        to_exp: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
            kind: literal_expr
            typ: 2
            child_nodes: []
            val: 10
        })
    })
    body_stmt: lib.comp.binding.BoundStmt(lib.comp.binding.BoundBlockStmt{
        kind: block_stmt
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
    kind: assign_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
        kind: binary_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
        left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var: mut  <a> (int)
        })
        op: lib.comp.binding.BoundBinaryOperator{
            op_kind: addition
            kind: plus
            left_typ: 2
            right_typ: 2
            res_typ: 2
        }
        right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var:  <b> (int)
        })
    })
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
        kind: assign_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
        expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
            kind: binary_expr
            typ: 2
            child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
            left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var: mut  <a> (int)
            })
            op: lib.comp.binding.BoundBinaryOperator{
                op_kind: addition
                kind: plus
                left_typ: 2
                right_typ: 2
                res_typ: 2
            }
            right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var:  <b> (int)
            })
        })
        var: &var: mut  <a> (int)
    })
}))]
        bound_stmts: [lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
    kind: assign_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
        kind: binary_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
        left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var: mut  <a> (int)
        })
        op: lib.comp.binding.BoundBinaryOperator{
            op_kind: addition
            kind: plus
            left_typ: 2
            right_typ: 2
            res_typ: 2
        }
        right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var:  <b> (int)
        })
    })
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
        kind: assign_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
        expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
            kind: binary_expr
            typ: 2
            child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
            left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var: mut  <a> (int)
            })
            op: lib.comp.binding.BoundBinaryOperator{
                op_kind: addition
                kind: plus
                left_typ: 2
                right_typ: 2
                res_typ: 2
            }
            right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var:  <b> (int)
            })
        })
        var: &var: mut  <a> (int)
    })
})]
    })
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
}))]
    bound_stmts: [lib.comp.binding.BoundStmt(lib.comp.binding.BoundVarDeclStmt{
    kind: var_decl_stmt
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 0
}))]
    is_mut: true
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 2
        child_nodes: []
        val: 0
    })
    var: &var: mut  <a> (int)
}), lib.comp.binding.BoundStmt(lib.comp.binding.BoundForRangeStmt{
    kind: for_range_stmt
    typ: 0
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundRangeExpr{
    kind: range_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 0
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 10
}))]
    from_exp: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 2
        child_nodes: []
        val: 0
    })
    to_exp: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
        kind: literal_expr
        typ: 2
        child_nodes: []
        val: 10
    })
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundBlockStmt{
    kind: block_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
    kind: assign_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
        kind: binary_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
        left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var: mut  <a> (int)
        })
        op: lib.comp.binding.BoundBinaryOperator{
            op_kind: addition
            kind: plus
            left_typ: 2
            right_typ: 2
            res_typ: 2
        }
        right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var:  <b> (int)
        })
    })
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
        kind: assign_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
        expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
            kind: binary_expr
            typ: 2
            child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
            left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var: mut  <a> (int)
            })
            op: lib.comp.binding.BoundBinaryOperator{
                op_kind: addition
                kind: plus
                left_typ: 2
                right_typ: 2
                res_typ: 2
            }
            right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var:  <b> (int)
            })
        })
        var: &var: mut  <a> (int)
    })
}))]
    bound_stmts: [lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
    kind: assign_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
        kind: binary_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
        left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var: mut  <a> (int)
        })
        op: lib.comp.binding.BoundBinaryOperator{
            op_kind: addition
            kind: plus
            left_typ: 2
            right_typ: 2
            res_typ: 2
        }
        right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var:  <b> (int)
        })
    })
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
        kind: assign_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
        expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
            kind: binary_expr
            typ: 2
            child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
            left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var: mut  <a> (int)
            })
            op: lib.comp.binding.BoundBinaryOperator{
                op_kind: addition
                kind: plus
                left_typ: 2
                right_typ: 2
                res_typ: 2
            }
            right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var:  <b> (int)
            })
        })
        var: &var: mut  <a> (int)
    })
})]
}))]
    ident: &var:  <b> (int)
    range_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundRangeExpr{
        kind: range_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 0
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
    kind: literal_expr
    typ: 2
    child_nodes: []
    val: 10
}))]
        from_exp: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
            kind: literal_expr
            typ: 2
            child_nodes: []
            val: 0
        })
        to_exp: lib.comp.binding.BoundExpr(lib.comp.binding.BoundLiteralExpr{
            kind: literal_expr
            typ: 2
            child_nodes: []
            val: 10
        })
    })
    body_stmt: lib.comp.binding.BoundStmt(lib.comp.binding.BoundBlockStmt{
        kind: block_stmt
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
    kind: assign_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
        kind: binary_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
        left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var: mut  <a> (int)
        })
        op: lib.comp.binding.BoundBinaryOperator{
            op_kind: addition
            kind: plus
            left_typ: 2
            right_typ: 2
            res_typ: 2
        }
        right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var:  <b> (int)
        })
    })
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
        kind: assign_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
        expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
            kind: binary_expr
            typ: 2
            child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
            left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var: mut  <a> (int)
            })
            op: lib.comp.binding.BoundBinaryOperator{
                op_kind: addition
                kind: plus
                left_typ: 2
                right_typ: 2
                res_typ: 2
            }
            right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var:  <b> (int)
            })
        })
        var: &var: mut  <a> (int)
    })
}))]
        bound_stmts: [lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
    kind: assign_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
    expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
        kind: binary_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
        left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var: mut  <a> (int)
        })
        op: lib.comp.binding.BoundBinaryOperator{
            op_kind: addition
            kind: plus
            left_typ: 2
            right_typ: 2
            res_typ: 2
        }
        right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
            kind: variable_expr
            typ: 2
            child_nodes: []
            var: &var:  <b> (int)
        })
    })
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundAssignExpr{
        kind: assign_expr
        typ: 2
        child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
    kind: binary_expr
    typ: 2
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
    left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
    op: lib.comp.binding.BoundBinaryOperator{
        op_kind: addition
        kind: plus
        left_typ: 2
        right_typ: 2
        res_typ: 2
    }
    right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var:  <b> (int)
    })
}))]
        expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundBinaryExpr{
            kind: binary_expr
            typ: 2
            child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
})), lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var:  <b> (int)
}))]
            left: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var: mut  <a> (int)
            })
            op: lib.comp.binding.BoundBinaryOperator{
                op_kind: addition
                kind: plus
                left_typ: 2
                right_typ: 2
                res_typ: 2
            }
            right: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
                kind: variable_expr
                typ: 2
                child_nodes: []
                var: &var:  <b> (int)
            })
        })
        var: &var: mut  <a> (int)
    })
})]
    })
}), lib.comp.binding.BoundStmt(lib.comp.binding.BoundExprStmt{
    kind: expr_stmt
    child_nodes: [lib.comp.binding.BoundNode(lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
    kind: variable_expr
    typ: 2
    child_nodes: []
    var: &var: mut  <a> (int)
}))]
    bound_expr: lib.comp.binding.BoundExpr(lib.comp.binding.BoundVariableExpr{
        kind: variable_expr
        typ: 2
        child_nodes: []
        var: &var: mut  <a> (int)
    })
})]
}